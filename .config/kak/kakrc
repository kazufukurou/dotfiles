colorscheme my

# show 3 rows and columns around the cursor
set-option global scrolloff 3,3
# indent with 2 spaces
set-option global indentwidth 2
# hide clippy
set-option global ui_options ncurses_assistant=none

# highlight trailing whitespace
add-highlighter global/ regex \h+$ 0:Error

# fix default mappings
map global normal / /(?i)
map global normal <minus> <a-i>
map global normal _ <a-a>
map global normal = <a-s>
map global normal + <a-.>
map global normal \' <a-semicolon>
map global normal D C
map global normal C <a-C>
map global normal <a-a> ''
map global normal <a-i> ''
map global normal <a-s> ''
map global normal <a-.> ''
map global normal <a-semicolon> ''

# user mappings
map global user c ': comment-line<ret>' -docstring 'comment line'
map global user f ': find-file<ret>' -docstring 'find file'
map global user F ': pick-file<ret>' -docstring 'pick file'
map global user g ': find-text<ret>' -docstring 'find text'
map global user p '<a-!>wl-paste -n<ret>' -docstring 'paste from system clipboard after selection'
map global user P '!wl-paste -n<ret>' -docstring 'paste from system clipboard before selection'
map global user y '<a-|> wl-copy<ret>' -docstring 'yank to system clipboard'
map global user q ': quit!<ret>' -docstring 'quit without saving'
map global user w ': write-all<ret>' -docstring 'write all'
map global user z ': write-all-quit<ret>' -docstring 'write all and quit'
declare-user-mode run
map global user r ': enter-user-mode run<ret>' -docstring 'run mode'
map global run r ': make<ret>' -docstring 'make'
map global run l ': lint<ret>' -docstring 'lint'

define-command pick-file -docstring 'pick file' %{nop %sh{
  file=$(term filepicker && cat "$XDG_CACHE_HOME/fff/opened_file")
  printf %s\\n "eval -client $kak_client edit -existing '%{$file}'" | kak -p "$kak_session"
}}

define-command find-file -docstring 'find file' %{nop %sh{
  term files > "$TERM_RESULT"
  file=$(cat "$TERM_RESULT")
  printf %s\\n "eval -client $kak_client edit -existing '%{$file}'" | kak -p "$kak_session"
  rm -r "$TERM_RESULT"
}}

define-command find-text -docstring 'find text' %{nop %sh{
  term matches > "$TERM_RESULT"
  file=$(cat "$TERM_RESULT" | cut -d: -f1)
  line=$(cat "$TERM_RESULT" | cut -d: -f2)
  printf %s\\n "eval -client $kak_client edit -existing '%{$file}' '$line'" | kak -p "$kak_session"
  rm -r "$TERM_RESULT"
}}

# make man readonly
hook global WinSetOption filetype=man %{ set buffer readonly true }

hook global BufSetOption filetype=sh %{
  set-option buffer lintcmd "shellcheck -fgcc -Cnever"
}

hook global BufSetOption filetype=lua %{
  set-option buffer makecmd "love ."
}
